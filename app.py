from flask import Flask, request
from flask import jsonify, render_template
import google.generativeai as genai
app = Flask(__name__)
genai.configure(api_key="AIzaSyB-eHew6FQX9d1tVd-OITJ3_x2U2LJOzGE")

generation_config = {
  "temperature": 1,
  "top_p": 0.95,
  "top_k": 64,
  "max_output_tokens": 8192,
}

safety_settings = [
  {
    "category": "HARM_CATEGORY_HARASSMENT",
    "threshold": "BLOCK_MEDIUM_AND_ABOVE"
  },
  {
    "category": "HARM_CATEGORY_HATE_SPEECH",
    "threshold": "BLOCK_MEDIUM_AND_ABOVE"
  },
  {
    "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
    "threshold": "BLOCK_MEDIUM_AND_ABOVE"
  },
  {
    "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
    "threshold": "BLOCK_MEDIUM_AND_ABOVE"
  },
]

model = genai.GenerativeModel(model_name="gemini-1.5-flash",
                              generation_config=generation_config,
                              safety_settings=safety_settings)

prompt_parts = [
  "input: які існують проблеми з якістю обслуговування",
  "output: Недостатня пропускна здатність мережі\nВідстань та маршрутизація\nПеренавантаження\nмаршрутизаторів або комутаторів",
  "input: недостатня пропускна здатність мережі",
  "output: Якщо мережа, через яку передаються дані або виклики, має обмежену пропускну\nздатність, це може призвести до затримок. Наприклад, мережа може бути\nперевантажена або не оптимізована для потреб вашої системи.",
  "input: як виявити причину недостатньої пропускна здатність мережі",
  "output: Проведіть тестування швидкості мережі, використовуючи\nінструменти, такі як Speedtest або iPerf, щоб виміряти фактичну швидкість\nпередачі даних.\nАналізуйте використання пропускної здатності мережі в різний\nчас доби за допомогою моніторингу мережі.",
  "input: як вирішити проблему недостатньої пропускна здатність мережі",
  "output: Аналіз мережевого навантаження: потрібно здійснити детальний\nаналіз мережевого трафіку, щоб ідентифікувати точки перевантаження та\nвизначити, які види даних або викликів найбільше страждають від затримок.\nОптимізація мережевого обладнання: потрібно переглянути\nналаштування маршрутизаторів, комутаторів та інших мережевих пристроїв з метою\nоптимізації їх роботи. Наприклад, налаштування Quality of Service (QoS)\nдозволяє виділити пріоритетний трафік, що допомагає уникнути затримок для\nважливих даних або викликів.\nРозширення пропускної здатності мережі: Якщо аналіз показує,\nщо пропускна здатність мережі недостатня, може бути необхідно розширити її. Це\nможе бути досягнуто через оновлення інтернет-з'єднання, збільшення пропускної\nздатності мережевих пристроїв або впровадження технологій балансування\nнавантаження.\nВикористання мережевих сервісів доставки контенту (CDN):\nВикористання CDN може допомогти зменшити затримки для віддалених користувачів\nшляхом розподілу контенту на серверах, що розташовані ближче до них.\nОптимізація кодеків та протоколів: потрібно переглянути\nвикористовувані кодеки для передачі аудіо- та відеоданих, а також мережеві\nпротоколи. Вибір більш ефективних кодеків та протоколів може допомогти зменшити\nобсяг даних, які потрібно передавати, та знизити затримки.",
  "input: як виявити проблеми з відстанню та маршрутизацією",
  "output: Використовуйте traceroute або подібні інструменти для\nвизначення маршруту, який проходять дані від джерела до призначення.\n\nАналізуйте затримки на кожному кроці маршруту для виявлення\nпроблемних ділянок.",
  "input: як виявити проблеми з перенавантаженням маршрутизаторів або комутаторів",
  "output: Моніторте використання ресурсів маршрутизаторів та\nкомутаторів. Перевірте журнали подій на наявність попереджень або помилок,\nпов'язаних з перенавантаженням.",
  "input: як виявити проблеми з поганою якістю сигналу або перешкоди в мережі",
  "output: Використовуйте інструменти, такі як Wireshark або TCPDump,\nдля аналізу пакетів і виявлення помилкових або втрачених пакетів. Проведіть аналіз якості сигналу для бездротових мереж за допомогою інструментів, таких як inSSIDer або Acrylic Wi-Fi.",
  "input: як виявити проблеми з обладнанням або програмним забезпеченням",
  "output: Перевірте стан обладнання та програмного забезпечення мережі\nза допомогою систем моніторингу стану обладнання та журналів подій.\n\nПроведіть тестування пристроїв на відповідність та виявлення\nдефектів.",
  "input: як виявити проблеми з перевантаженням мережі",
  "output: Моніторте загальний рівень трафіку в мережі за допомогою\nсистем моніторингу мережі.\n\nАналізуйте піки активності трафіку та виявляйте причини, такі\nяк заплановані заходи або непередбачені події.",
  "input: як виявити проблеми з недостатньою оптимізацією протоколів",
  "output: Проведіть аналіз протоколів, які використовуються в мережі,\nта порівняйте їх з вимогами вашої системи. Використовуйте інструменти аналізу протоколів, такі як\nWireshark, для виявлення найбільш витратних або неефективних елементів мережі.",
  "input: як вирішити проблему з відстанню та та маршрутизацією",
  "output: Аналіз маршрутизації мережі: Почніть з аналізу мережевої\nтопології, включаючи всі маршрутизатори та комутатори між джерелом та\nпризначенням даних чи викликів.\n\nВизначте поточні маршрути, якими дані проходять від джерела\nдо призначення.\n\nПеревірте маршрути на відсутність неоптимальних шляхів та\nможливість використання альтернативних шляхів, які можуть бути більш прямими та\nшвидкими.\n\n \n\nОптимізація маршрутизації: Перегляньте налаштування\nмаршрутизаторів та комутаторів і переконайтеся, що вони налаштовані для\nвикористання найбільш ефективних маршрутів.\n\nВикористовуйте протоколи динамічної маршрутизації, такі як\nOSPF або BGP, для автоматичного виявлення та вибору оптимальних маршрутів в\nреальному часі.\n\nНалаштуйте політики маршрутизації та маршрутизаційні фільтри\nдля забезпечення передачі даних через найшвидший та найбільш надійний шлях.\n\n \n\nВикористання технологій оптимізації мережі: Розгляньте\nможливість використання технологій оптимізації мережі, таких як MPLS\n(Multi-Protocol Label Switching), для створення прямих та ефективних маршрутів\nдля передачі даних через великі відстані.\n\nВикористовуйте технології WAN оптимізації, такі як\nWAN-ускорення та компресія даних, для зменшення затримок та покращення\nпродуктивності через великі відстані.\n\n \n\nВикористання кешування та локальних ресурсів: Розгляньте\nможливість розгортання локальних серверів або CDN (мереж доставки контенту) для\nзбереження копій популярного контенту або даних ближче до кінцевих\nкористувачів.\n\nВикористовуйте технології кешування на маршрутизаторах та\nпроміжних вузлах, щоб зберегти копії часто використовуваних даних та зменшити\nкількість даних, які потрібно передавати через великі відстані.",
  "input: які існують проблеми з якістю обслуговування",
  "output: Недостатня пропускна здатність мережі\nВідстань та маршрутизація\nПеренавантаження\nмаршрутизаторів або комутаторів",
  "input: які існують проблеми з якістю обслуговування",
  "output: Недостатня пропускна здатність мережі\nВідстань та маршрутизація\nПеренавантаження\nмаршрутизаторів або комутаторів",
  "input: які існують проблеми з якістю обслуговування",
  "output: Недостатня пропускна здатність мережі\nВідстань та маршрутизація\nПеренавантаження\nмаршрутизаторів або комутаторів",
  "input: які існують проблеми з якістю обслуговування",
  "output: Недостатня пропускна здатність мережі\nВідстань та маршрутизація\nПеренавантаження\nмаршрутизаторів або комутаторів",
  "input: які існують проблеми з якістю обслуговування",
  "output: Недостатня пропускна здатність мережі\nВідстань та маршрутизація\nПеренавантаження\nмаршрутизаторів або комутаторів",
  "input: які існують проблеми з якістю обслуговування",
  "output: Недостатня пропускна здатність мережі\nВідстань та маршрутизація\nПеренавантаження\nмаршрутизаторів або комутаторів",
  "input: які існують проблеми з якістю обслуговування",
  "output: Недостатня пропускна здатність мережі\nВідстань та маршрутизація\nПеренавантаження\nмаршрутизаторів або комутаторів",
  "input: які існують проблеми з якістю обслуговування",
  "output: Недостатня пропускна здатність мережі\nВідстань та маршрутизація\nПеренавантаження\nмаршрутизаторів або комутаторів",
  "input: які існують проблеми з якістю обслуговування",
  "output: Недостатня пропускна здатність мережі\nВідстань та маршрутизація\nПеренавантаження\nмаршрутизаторів або комутаторів",
  "input: які існують проблеми з якістю обслуговування",
  "output: Недостатня пропускна здатність мережі\nВідстань та маршрутизація\nПеренавантаження\nмаршрутизаторів або комутаторів",
  "input: які проблеми з якістю обслуговування ти знаєш",
  "output: ",
]

lessons = [
    {"id": 1, "name": "Python programming", "credits": 5},
    {"id": 2, "name": "Java programming", "credits": 4},
    {"id": 3, "name": "TypeScript programming", "credits": 3},
    {"id": 4, "name": "C++ programming", "credits": 1},
];




@app.route('/<prompt>')
def genai_prompt(prompt):
    response = model.generate_content(prompt)
    print(response.text)
    return response.text;

@app.route('/')
def hello_world():
    return 'Hello, World! Now my app is running locally!!!! Yeah!!!!!!!!!!!!!!!!!'

@app.route('/lessons')
def get_lessons():
    return jsonify(lessons);

@app.route('/create-lesson')
def create_lesson():
    name = request.args["name"];
    credits = request.args["credits"];
    id = len(lessons)+1;
    newLesson = {"id": id, "name": name, "credits": credits};
    lessons.append(newLesson);
    return jsonify(lessons);

@app.route('/delete/<lesson_id>', methods=["GET"])
def delete_lesson(lesson_id):
    for lesson in lessons:
        if lesson["id"] == int(lesson_id):
            lessons.remove(lesson);
    return render_template("delete-success.html", lesson_id = lesson_id)


if __name__ == "__main__":
    app.run();
